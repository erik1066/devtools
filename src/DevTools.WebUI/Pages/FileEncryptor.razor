@page "/fileencryptor"
@using System.Net.Http.Headers 
@using DevTools.WebUI.Models
@using Tewr.Blazor.FileReader


<EditForm Model="@fileEncryptionModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">

        <div class="form-group">
            <label for="inputFile">Input file:</label>
            <input type="file" @onchange="HandleSelected" class="form-control-file" id="inputFile">
        </div>

        <div class="form-group">
            <label for="password">
                Password:
            </label>
            <InputText id="password" class="form-control" @bind-Value="fileEncryptionModel.Password" />
        </div>

        <div class="form-group">
            <label for="initVector">
                Initialization vector:
            </label>
            <InputText id="initVector" class="form-control" @bind-Value="fileEncryptionModel.InitVector" />
        </div>

        <div class="form-group">
            <label for="salt">
                Salt:
            </label>
            <InputText id="salt" class="form-control" @bind-Value="fileEncryptionModel.Salt" />
        </div>
    </div>

</EditForm>

@code {
    private FileEncryptionModel fileEncryptionModel = new FileEncryptionModel();

    private string output = string.Empty;
    private double progress = 25.0;

    private ElementReference _input;

    [Parameter]
    public string ImgUrl { get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }
    [Inject]
    public IFileReaderService FileReaderService { get; set; }


    private void HandleValidSubmit()
    {

    }

    private async Task HandleSelected()
    {
        foreach (var file in await FileReaderService.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "image", fileInfo.Name);
                }
            }
        }
    }
}
